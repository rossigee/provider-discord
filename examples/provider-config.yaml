apiVersion: pkg.crossplane.io/v1
kind: Provider
metadata:
  name: provider-discord
spec:
  package: ghcr.io/rossigee/provider-discord:v0.3.3
  revisionActivationPolicy: Automatic
  revisionHistoryLimit: 1
  runtimeConfigRef:
    name: provider-discord-runtime-config
---
apiVersion: pkg.crossplane.io/v1beta1
kind: DeploymentRuntimeConfig
metadata:
  name: provider-discord-config
spec:
  deploymentTemplate:
    spec:
      selector: {}
      template:
        spec:
          containers:
          - name: package-runtime
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 128Mi
            env:
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://jaeger-collector:14268/api/traces"
            - name: OTEL_SERVICE_NAME
              value: "provider-discord"
            - name: OTEL_SAMPLING_RATIO
              value: "0.1"
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 2000
              capabilities:
                drop: ["ALL"]
          securityContext:
            runAsNonRoot: true
            runAsUser: 2000
            fsGroup: 2000
---
apiVersion: pkg.crossplane.io/v1beta1
kind: DeploymentRuntimeConfig
metadata:
  name: provider-discord-runtime-config
spec:
  deploymentTemplate:
    spec:
      selector: {}
      template:
        metadata:
          annotations:
            prometheus.io/scrape: "true"
            prometheus.io/port: "8080"
            prometheus.io/path: "/metrics"
        spec:
          containers:
          - name: package-runtime
            args:
            - --debug
            - --leader-election=true
            - --max-reconcile-rate=100
            - --poll-interval=10m
            - --sync-interval=1h
            - --enable-management-policies
            resources:
              limits:
                cpu: 500m
                memory: 512Mi
              requests:
                cpu: 100m
                memory: 128Mi
            env:
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://jaeger-collector:14268/api/traces"
            - name: OTEL_SERVICE_NAME
              value: "provider-discord"
            - name: OTEL_SAMPLING_RATIO
              value: "0.1"
            # Discord-specific environment variables
            - name: DISCORD_API_BASE_URL
              value: "https://discord.com/api/v10"
            - name: DISCORD_RATE_LIMIT_BACKOFF_MAX
              value: "30s"
            - name: DISCORD_CIRCUIT_BREAKER_ENABLED
              value: "true"
            - name: DISCORD_METRICS_ENABLED
              value: "true"
            - name: DISCORD_HEALTH_CHECK_INTERVAL
              value: "30s"
            ports:
            - name: metrics
              containerPort: 8080
              protocol: TCP
            - name: health
              containerPort: 8081
              protocol: TCP
            livenessProbe:
              httpGet:
                path: /healthz
                port: health
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 5
              failureThreshold: 3
            readinessProbe:
              httpGet:
                path: /readyz
                port: health
              initialDelaySeconds: 5
              periodSeconds: 10
              timeoutSeconds: 5
              failureThreshold: 3
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              runAsNonRoot: true
              runAsUser: 2000
              capabilities:
                drop: ["ALL"]
          securityContext:
            runAsNonRoot: true
            runAsUser: 2000
            fsGroup: 2000

---
apiVersion: v1
kind: Secret
metadata:
  name: discord-creds
  namespace: crossplane-system
type: Opaque
data:
  # Base64 encoded Discord bot token
  # kubectl create secret generic discord-creds -n crossplane-system --from-literal=token=YOUR_BOT_TOKEN
  token: ""
---
apiVersion: v1
kind: Service
metadata:
  name: provider-discord-metrics
  namespace: crossplane-system
  labels:
    app: provider-discord
spec:
  selector:
    pkg.crossplane.io/provider: provider-discord
  ports:
  - name: metrics
    port: 8080
    targetPort: metrics
    protocol: TCP
  - name: health
    port: 8081
    targetPort: health
    protocol: TCP
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: provider-discord
  namespace: crossplane-system
  labels:
    app: provider-discord
spec:
  selector:
    matchLabels:
      app: provider-discord
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: provider-discord
  namespace: crossplane-system
spec:
  selector:
    matchLabels:
      pkg.crossplane.io/provider: provider-discord
  maxUnavailable: 0
  # Ensure at least one pod is always available
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: provider-discord
  namespace: crossplane-system
spec:
  podSelector:
    matchLabels:
      pkg.crossplane.io/provider: provider-discord
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: crossplane-system
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080  # metrics
    - protocol: TCP
      port: 8081  # health
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443   # HTTPS to Discord API
    - protocol: TCP
      port: 53    # DNS
    - protocol: UDP
      port: 53    # DNS
  - to:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 443   # Kubernetes API
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 14268  # OTEL/Jaeger
