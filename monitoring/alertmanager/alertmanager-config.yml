# AlertManager configuration for Provider Discord
# This configuration defines routing rules and notification channels for alerts

global:
  # Default SMTP configuration for email notifications
  smtp_smarthost: 'localhost:587'
  smtp_from: 'alerts@company.com'
  smtp_require_tls: true

# Templates for alert notifications
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# Routing configuration
route:
  # Default receiver for all alerts
  receiver: 'default'
  
  # Group alerts by service and severity
  group_by: ['service', 'severity']
  
  # Wait time before sending initial notification
  group_wait: 30s
  
  # Wait time before sending notifications for new alerts in same group
  group_interval: 5m
  
  # Wait time before sending repeat notifications
  repeat_interval: 12h

  # Route specific alerts to different receivers
  routes:
    # Critical alerts go to multiple channels
    - match:
        severity: critical
        service: provider-discord
      receiver: 'provider-discord-critical'
      group_wait: 10s
      group_interval: 5m
      repeat_interval: 1h
    
    # Warning alerts go to team channel
    - match:
        severity: warning
        service: provider-discord
      receiver: 'provider-discord-warning'
      group_interval: 10m
      repeat_interval: 6h
    
    # SLA breach alerts need immediate attention
    - match_re:
        service: provider-discord
        sla: '.*'
      receiver: 'provider-discord-sla'
      group_wait: 5s
      group_interval: 2m
      repeat_interval: 30m

# Notification receivers
receivers:
  - name: 'default'
    webhook_configs:
      - url: 'http://localhost:9093/webhook'
        send_resolved: true

  - name: 'provider-discord-critical'
    # Send to multiple channels for critical alerts
    slack_configs:
      - api_url: 'YOUR_SLACK_WEBHOOK_URL'
        channel: '#provider-discord-alerts'
        title: 'CRITICAL: Provider Discord Alert'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Runbook:* {{ .Annotations.runbook_url }}
          *Labels:* {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}
        send_resolved: true
        
    email_configs:
      - to: 'oncall@company.com'
        subject: 'CRITICAL: Provider Discord Alert - {{ .GroupLabels.service }}'
        body: |
          Critical alert detected for Provider Discord.
          
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Runbook: {{ .Annotations.runbook_url }}
          Started: {{ .StartsAt }}
          {{ if .EndsAt }}Ended: {{ .EndsAt }}{{ end }}
          
          Labels:{{ range .Labels.SortedPairs }}
          - {{ .Name }}: {{ .Value }}{{ end }}
          {{ end }}
        send_resolved: true

  - name: 'provider-discord-warning'
    slack_configs:
      - api_url: 'YOUR_SLACK_WEBHOOK_URL'
        channel: '#provider-discord-alerts'
        title: 'WARNING: Provider Discord Alert'
        text: |
          {{ range .Alerts }}
          *Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Runbook:* {{ .Annotations.runbook_url }}
          {{ end }}
        send_resolved: true

  - name: 'provider-discord-sla'
    # SLA breaches need immediate attention
    slack_configs:
      - api_url: 'YOUR_SLACK_WEBHOOK_URL'
        channel: '#sla-alerts'
        title: 'SLA BREACH: Provider Discord'
        text: |
          {{ range .Alerts }}
          *SLA Breach Detected*
          *Type:* {{ .Labels.sla }}
          *Alert:* {{ .Annotations.summary }}
          *Description:* {{ .Annotations.description }}
          *Runbook:* {{ .Annotations.runbook_url }}
          {{ end }}
        send_resolved: true
        
    webhook_configs:
      - url: 'YOUR_SLA_MONITORING_WEBHOOK'
        send_resolved: true
        http_config:
          basic_auth:
            username: 'sla-monitor'
            password: 'your-password'

# Inhibition rules - suppress certain alerts when others are firing
inhibit_rules:
  # Suppress warning alerts when critical alerts are firing
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    equal: ['service', 'resource_type']

  # Suppress individual resource alerts when provider is down
  - source_match:
      alertname: 'ProviderDiscordDown'
    target_match_re:
      alertname: 'ProviderDiscord.*'
    equal: ['service']

  # Suppress high error rate alerts when API is unhealthy
  - source_match:
      alertname: 'ProviderDiscordAPIUnhealthy'
    target_match:
      alertname: 'ProviderDiscordHighErrorRate'
    equal: ['service']

# Mute specific alerts (examples)
# mute_time_intervals:
#   - name: 'maintenance-window'
#     time_intervals:
#       - times:
#           - start_time: '02:00'
#             end_time: '04:00'
#         weekdays: ['sunday']

# Configuration for high availability (if running multiple instances)
# peer:
#   - 'alertmanager-1:9094'
#   - 'alertmanager-2:9094'