name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write
  id-token: write

env:
  GO_VERSION: '1.25.1'

jobs:
  build-and-release:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.PAT_TOKEN }}

      - name: Get Version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "version_no_v=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Install Crossplane CLI
        run: |
          mkdir -p .cache/tools/linux_x86_64
          curl -fsSLo .cache/tools/linux_x86_64/crossplane-cli-v1.20.0 --create-dirs https://releases.crossplane.io/stable/v1.20.0/bin/linux_amd64/crank?source=build
          chmod +x .cache/tools/linux_x86_64/crossplane-cli-v1.20.0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Build Packages (Multi-Platform)
        run: |
          make generate
          make build PLATFORMS="linux_amd64,linux_arm64"

      - name: Debug Registry Configuration
        run: |
          echo "REGISTRY_ORGS: ghcr.io/${{ github.repository_owner }}"
          echo "XPKG_REG_ORGS: ghcr.io/${{ github.repository_owner }}"
          echo "VERSION: ${{ steps.version.outputs.version }}"
          echo "PLATFORMS: linux_amd64,linux_arm64"
          echo "BRANCH_NAME: ${GITHUB_REF#refs/heads/}"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_REF_NAME: $GITHUB_REF_NAME"
          echo "GITHUB_REF_TYPE: $GITHUB_REF_TYPE"
          echo "=== Checking build artifacts ==="
          ls -la _output/ || echo "No _output directory"
          ls -la _output/bin/ || echo "No bin directory"
          ls -la _output/bin/linux_amd64/ || echo "No linux_amd64 directory"
          ls -la _output/xpkg/linux_amd64/ || echo "No amd64 packages found"
          ls -la _output/xpkg/linux_arm64/ || echo "No arm64 packages found"
          echo "=== Checking root package.yaml ==="
          ls -la package.yaml || echo "No package.yaml in root"
          echo "=== Working directory ==="
          pwd
          ls -la

      - name: Publish to Registry (Multi-Platform)
        run: |
          set -x
          make publish VERSION=${{ steps.version.outputs.version }} PLATFORMS="linux_amd64,linux_arm64" BRANCH_NAME=master
        env:
          REGISTRY_ORGS: "ghcr.io/${{ github.repository_owner }}"
          XPKG_REG_ORGS: "ghcr.io/${{ github.repository_owner }}"

      - name: List Build Artifacts
        run: |
          echo "=== Build artifacts created ==="
          find _output -name "*.xpkg" -o -name "provider-discord*" | head -20
          echo "=== Checking specific package file ==="
          ls -la _output/xpkg/linux_amd64/provider-discord-${{ steps.version.outputs.version }}.xpkg || echo "Package file not found"

      - name: Generate Changelog
        id: changelog
        run: |
          # Simple changelog generation
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > changelog.txt
            git log --oneline $PREVIOUS_TAG..HEAD >> changelog.txt
          else
            echo "## Initial Release" > changelog.txt
            echo "First release of provider-discord for Crossplane" >> changelog.txt
            echo "" >> changelog.txt
            echo "### Features" >> changelog.txt
            echo "- Discord guild (server) management" >> changelog.txt
            echo "- Channel creation and configuration" >> changelog.txt
            echo "- Role and permission management" >> changelog.txt
            echo "- Webhook support for automation" >> changelog.txt
            echo "- GitOps-ready Discord infrastructure management" >> changelog.txt
          fi

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.version.outputs.version }}
          body_path: changelog.txt
          files: |
            _output/xpkg/linux_amd64/provider-discord-${{ steps.version.outputs.version }}.xpkg
          draft: false
          prerelease: false
          fail_on_unmatched_files: false
