name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
  push:
    branches:
      - master
      - main
  pull_request:
    branches:
      - master
      - main

permissions:
  contents: read
  security-events: write
  actions: read
  id-token: write
  attestations: write

env:
  GO_VERSION: '1.24.5'

jobs:
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ['go']
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          config-file: '.github/dependency-review-config.yml'
          fail-on-severity: moderate
          license-check: true
          vulnerability-check: true

  security-hardening:
    name: Security Hardening Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run Gosec Security Scanner
        uses: securecodewarrior/github-action-gosec@master
        with:
          args: '-fmt sarif -out gosec-results.sarif ./...'

      - name: Upload Gosec results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-results.sarif

      - name: Run Nancy vulnerability scanner
        run: |
          go install github.com/sonatypecommunity/nancy@latest
          go list -json -deps ./... | nancy sleuth --loud

      - name: Check for secrets with TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-security:
    name: Container Security
    runs-on: ubuntu-latest
    needs: []
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Docker image
        run: make docker-build

      - name: Run Trivy container scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'provider-discord:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-container-results.sarif'

      - name: Run Dockle for container best practices
        run: |
          curl -sSfL https://raw.githubusercontent.com/goodwithtech/dockle/master/install.sh | sh -s -- -b /usr/local/bin
          dockle --exit-code 1 --exit-level WARN provider-discord:latest

      - name: Run Snyk container test
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: provider-discord:latest
          args: --severity-threshold=medium --file=Dockerfile
        continue-on-error: true

  sbom-generation:
    name: SBOM Generation and Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build application
        run: make build

      - name: Generate SBOM with Syft
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Generate SBOM with CycloneDX format
        uses: anchore/sbom-action@v0
        with:
          path: .
          format: cyclonedx-json
          output-file: sbom.cyclonedx.json

      - name: Scan SBOM with Grype
        uses: anchore/grype-action@v0
        with:
          sbom: sbom.spdx.json
          format: sarif
          output: grype-sbom-results.sarif
          fail-build: false

      - name: Upload Grype SBOM scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: grype-sbom-results.sarif

      - name: Attest SBOM
        uses: actions/attest-sbom@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        with:
          subject-path: '_output/bin/provider'
          sbom-path: sbom.spdx.json

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-files
          path: |
            sbom.spdx.json
            sbom.cyclonedx.json
          retention-days: 30

  license-compliance:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check licenses
        run: |
          go-licenses check ./...
          go-licenses csv ./... > licenses.csv

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: licenses.csv

  supply-chain:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Run SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.5.1

      - name: Verify dependencies with SLSA
        run: |
          # Check if major dependencies have SLSA attestations
          echo "Checking SLSA attestations for key dependencies..."
          # This would be expanded with actual dependency verification

      - name: Check for known malicious packages
        run: |
          # Use OSV scanner to check for known malicious packages
          curl -sSfL https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64 -o osv-scanner
          chmod +x osv-scanner
          ./osv-scanner --lockfile=go.sum --format=sarif --output=osv-results.sarif || true

      - name: Upload OSV scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: osv-results.sarif

  security-policy-check:
    name: Security Policy Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check for SECURITY.md
        run: |
          if [[ ! -f "SECURITY.md" ]]; then
            echo "::warning::SECURITY.md file is missing"
            exit 1
          fi

      - name: Validate Dockerfile security practices
        run: |
          # Check for security best practices in Dockerfile
          if [[ -f "Dockerfile" ]]; then
            # Check for non-root user
            if ! grep -q "USER.*[0-9]" Dockerfile; then
              echo "::warning::Dockerfile should specify non-root USER"
            fi
            
            # Check for COPY --chown usage
            if grep -q "COPY.*--chown" Dockerfile; then
              echo "::info::Good: Using COPY --chown for file ownership"
            fi
            
            # Check for healthcheck
            if grep -q "HEALTHCHECK" Dockerfile; then
              echo "::info::Good: Dockerfile includes HEALTHCHECK"
            else
              echo "::warning::Consider adding HEALTHCHECK to Dockerfile"
            fi
          fi

      - name: Check for secrets in code
        run: |
          # Basic check for potential secrets (this is caught by TruffleHog above too)
          if grep -r -i "password\|secret\|token\|key" --include="*.go" --exclude-dir=vendor . | grep -v "// " | grep -v "/*" | head -5; then
            echo "::warning::Potential secrets found in code - review carefully"
          fi

  results-summary:
    name: Security Scan Results Summary
    runs-on: ubuntu-latest
    needs: [codeql, security-hardening, container-security, sbom-generation, license-compliance, supply-chain, security-policy-check]
    if: always()
    steps:
      - name: Security Scan Summary
        run: |
          echo "## Security Scan Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Hardening | ${{ needs.security-hardening.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | ${{ needs.sbom-generation.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Compliance | ${{ needs.license-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Supply Chain | ${{ needs.supply-chain.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Policy | ${{ needs.security-policy-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the Security tab for detailed vulnerability reports." >> $GITHUB_STEP_SUMMARY